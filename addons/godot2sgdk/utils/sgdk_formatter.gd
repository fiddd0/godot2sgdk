@tool
extends RefCounted

const HEADER_TEMPLATE = """// Auto-generated by Godot2SGDK
// {timestamp}

#ifndef {header_guard}
#define {header_guard}

#define {map_name_upper}_WIDTH {width}
#define {map_name_upper}_HEIGHT {height}

const unsigned short {map_name_lower}_map[] = {{
{data}}};

#endif // {header_guard}
"""

const SPRITE_TEMPLATE = """// Auto-generated by Godot2SGDK
// {timestamp}

#ifndef {header_guard}
#define {header_guard}

#define {sprite_name_upper}_WIDTH {width}
#define {sprite_name_upper}_HEIGHT {height}
#define {sprite_name_upper}_FRAMES {frames}

const unsigned short {sprite_name_lower}_data[] = {{
{data}}};

#endif // {header_guard}
"""

func generate_header(template_data: Dictionary) -> String:
	var template = HEADER_TEMPLATE
	template_data["timestamp"] = Time.get_datetime_string_from_system()
	template_data["header_guard"] = _generate_header_guard(template_data.map_name)
	template_data["map_name_upper"] = template_data.map_name.to_upper()
	template_data["map_name_lower"] = template_data.map_name.to_lower()
	
	return template.format(template_data)

func generate_sprite_header(template_data: Dictionary) -> String:
	var template = SPRITE_TEMPLATE
	template_data["timestamp"] = Time.get_datetime_string_from_system()
	template_data["header_guard"] = _generate_header_guard(template_data.sprite_name)
	template_data["sprite_name_upper"] = template_data.sprite_name.to_upper()
	template_data["sprite_name_lower"] = template_data.sprite_name.to_lower()
	
	return template.format(template_data)

func _generate_header_guard(name: String) -> String:
	return name.to_upper() + "_H"

func format_tile_array(tiles: Array, items_per_line: int = 16) -> String:
	var output = ""
	var counter = 0
	
	for row in tiles:
		for tile in row:
			if counter % items_per_line == 0:
				output += "    "
			output += "0x%04X, " % tile
			counter += 1
			if counter % items_per_line == 0:
				output += "\n"
	
	if counter % items_per_line != 0:
		output += "\n"
	
	return output
