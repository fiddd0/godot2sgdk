@tool
extends RefCounted
class_name EntityExporter

class EntityData:
	var name: String
	var position: Vector2
	var rotation: float
	var scale: Vector2
	var components: Dictionary
	var custom_properties: Dictionary

func export_entities_in_scene(scene_root: Node) -> Dictionary:
	var entities = {}
	var entity_nodes = _find_entity_nodes(scene_root)
	
	for node in entity_nodes:
		var entity_data = _extract_entity_data(node)
		if entity_data:
			entities[node.name] = entity_data
			_generate_entity_header(entity_data)
	
	return entities

func _find_entity_nodes(node: Node) -> Array:
	var nodes = []

	if not node:  # ✅ CORREÇÃO: Verificar se node não é null
		return nodes
	
	# Considerar CharacterBody2D, RigidBody2D, Area2D como entidades
	if (node is CharacterBody2D or node is RigidBody2D or 
		node is Area2D or (node and node.has_method("is_entity"))): # ✅ CORREÇÃO
		nodes.append(node)
	
	for child in node.get_children():
		nodes.append_array(_find_entity_nodes(child))
	
	return nodes

func _extract_entity_data(node: Node) -> EntityData:
	var data = EntityData.new()
	data.name = node.name
	data.position = node.position
	data.rotation = node.rotation
	data.scale = node.scale
	
	# Extrair componentes (scripts, nodes filhos, etc)
	data.components = _extract_components(node)
	
	# Extrair propriedades customizadas
	data.custom_properties = _extract_custom_properties(node)
	
	return data

func _extract_components(node: Node) -> Dictionary:
	var components = {}
	
	# Verificar scripts
	if node.get_script():
		components["script"] = node.get_script().resource_path
	
	# Verificar nodes filhos específicos
	for child in node.get_children():
		if (child is CollisionShape2D or child is Sprite2D or 
			child is AnimationPlayer or child is AudioStreamPlayer2D):
			components[child.name] = child.get_class()
	
	return components

func _extract_custom_properties(node: Node) -> Dictionary:
	var properties = {}
	
	# Extrair propriedades exportadas
	var script = node.get_script()
	if script:
		var script_properties = script.get_script_property_list()
		for property in script_properties:
			if property.usage & PROPERTY_USAGE_SCRIPT_VARIABLE:
				var value = node.get(property.name)
				properties[property.name] = value
	
	return properties

func _generate_entity_header(entity_data: EntityData) -> String:
	var header = "// Entity: %s\n" % entity_data.name
	header += "// Generated by Godot2SGDK\n\n"
	
	header += "const Entity %s = {\n" % entity_data.name.to_lower()
	header += "    {%d, %d}, // position\n" % [entity_data.position.x, entity_data.position.y]
	header += "    %f,      // rotation\n" % entity_data.rotation
	header += "    {%f, %f}, // scale\n" % [entity_data.scale.x, entity_data.scale.y]
	header += "    %d       // components_count\n" % entity_data.components.size()
	header += "};\n\n"
	
	# Gerar arrays de componentes se necessário
	if entity_data.components.size() > 0:
		header += "// Components for %s\n" % entity_data.name
		for comp_name in entity_data.components:  # CORRIGIDO: sem "comp_type in"
			var comp_type = entity_data.components[comp_name]
			header += "// - %s: %s\n" % [comp_name, comp_type]
	
	return header
