@tool
extends RefCounted
class_name PaletteManager

# Paleta padrão do Mega Drive (16 cores)
const DEFAULT_PALETTE = [
	Color(0, 0, 0),         # 0: Preto
	Color(1, 1, 1),         # 1: Branco  
	Color(1, 0, 0),         # 2: Vermelho
	Color(0, 1, 0),         # 3: Verde
	Color(0, 0, 1),         # 4: Azul
	Color(1, 1, 0),         # 5: Amarelo
	Color(1, 0, 1),         # 6: Magenta
	Color(0, 1, 1),         # 7: Ciano
	Color(0.5, 0.5, 0.5),   # 8: Cinza
	Color(0.75, 0.75, 0.75),# 9: Cinza claro
	Color(0.5, 0, 0),       # 10: Vermelho escuro
	Color(0, 0.5, 0),       # 11: Verde escuro
	Color(0, 0, 0.5),       # 12: Azul escuro
	Color(0.5, 0.5, 0),     # 13: Amarelo escuro
	Color(0.5, 0, 0.5),     # 14: Magenta escuro
	Color(0, 0.5, 0.5)      # 15: Ciano escuro
]

var current_palette: Array = DEFAULT_PALETTE.duplicate()

# Converter cor Godot para índice de paleta Mega Drive
func color_to_palette_index(color: Color) -> int:
	# Se for totalmente transparente, retornar 0 (transparência)
	if color.a < 0.1:
		return 0
	
	var closest_index = 0
	var closest_distance = INF
	
	for i in range(current_palette.size()):
		var palette_color = current_palette[i]
		var distance = _color_distance(color, palette_color)
		
		if distance < closest_distance:
			closest_distance = distance
			closest_index = i
	
	return closest_index

# Calcular distância entre cores (RGB)
func _color_distance(c1: Color, c2: Color) -> float:
	return sqrt(
		pow(c1.r - c2.r, 2) +
		pow(c1.g - c2.g, 2) + 
		pow(c1.b - c2.b, 2)
	)

# Gerar header SGDK para paleta
func generate_palette_header(palette_name: String = "game_palette") -> String:
	var header = "// Palette: %s\n" % palette_name
	header += "// Generated by Godot2SGDK\n\n"
	
	header += "const unsigned short %s[] = {\n" % palette_name
	header += "    "
	
	for i in range(current_palette.size()):
		var color = current_palette[i]
		var md_color = _color_to_md_format(color)
		header += "0x%04X" % md_color
		
		if i < current_palette.size() - 1:
			header += ", "
			if (i + 1) % 8 == 0:  # Quebra de linha a cada 8 cores
				header += "\n    "
	
	header += "\n};\n"
	return header

# Converter cor Godot para formato Mega Drive (0BBB0GGG0RRR0)
func _color_to_md_format(color: Color) -> int:
	var r = int(color.r * 7) & 0x7  # 3 bits (0-7)
	var g = int(color.g * 7) & 0x7  # 3 bits (0-7)
	var b = int(color.b * 7) & 0x7  # 3 bits (0-7)
	
	return (b << 9) | (g << 5) | (r << 1)

# Salvar paleta para arquivo
func save_palette_to_file(file_path: String, palette_name: String = "game_palette") -> bool:
	var header_content = generate_palette_header(palette_name)
	
	var file = FileAccess.open(file_path, FileAccess.WRITE)
	if file:
		file.store_string(header_content)
		file.close()
		return true
	
	return false

# Carregar paleta personalizada
func load_custom_palette(colors: Array) -> void:
	if colors.size() != 16:
		push_error("Palette must have exactly 16 colors")
		return
	
	current_palette = colors.duplicate()

# Reset para paleta padrão
func reset_to_default_palette() -> void:
	current_palette = DEFAULT_PALETTE.duplicate()

# Obter cor pelo índice
func get_color_by_index(index: int) -> Color:
	if index >= 0 and index < current_palette.size():
		return current_palette[index]
	return Color(0, 0, 0)

# Verificar se uma cor existe na paleta
func get_color_index(color: Color) -> int:
	for i in range(current_palette.size()):
		if current_palette[i].is_equal_approx(color):
			return i
	return -1
